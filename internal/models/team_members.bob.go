// Code generated by BobGen psql v0.30.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"io"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// TeamMember is an object representing the database table.
type TeamMember struct {
	UserID       string           `db:"user_id,pk" json:"user_id"`
	TeamID       string           `db:"team_id,pk" json:"team_id"`
	Role         string           `db:"role" json:"role"`
	JerseyNumber null.Val[int32]  `db:"jersey_number" json:"jersey_number"`
	Position     null.Val[string] `db:"position" json:"position"`
	JoinedAt     time.Time        `db:"joined_at" json:"joined_at"`

	R teamMemberR `db:"-" json:"-"`
}

// TeamMemberSlice is an alias for a slice of pointers to TeamMember.
// This should almost always be used instead of []*TeamMember.
type TeamMemberSlice []*TeamMember

// TeamMembers contains methods to work with the team_members table
var TeamMembers = psql.NewTablex[*TeamMember, TeamMemberSlice, *TeamMemberSetter]("", "team_members")

// TeamMembersQuery is a query on the team_members table
type TeamMembersQuery = *psql.ViewQuery[*TeamMember, TeamMemberSlice]

// teamMemberR is where relationships are stored.
type teamMemberR struct {
	Team *Team `json:"Team"` // team_members.team_members_team_id_fkey
	User *User `json:"User"` // team_members.team_members_user_id_fkey
}

type teamMemberColumnNames struct {
	UserID       string
	TeamID       string
	Role         string
	JerseyNumber string
	Position     string
	JoinedAt     string
}

var TeamMemberColumns = buildTeamMemberColumns("team_members")

type teamMemberColumns struct {
	tableAlias   string
	UserID       psql.Expression
	TeamID       psql.Expression
	Role         psql.Expression
	JerseyNumber psql.Expression
	Position     psql.Expression
	JoinedAt     psql.Expression
}

func (c teamMemberColumns) Alias() string {
	return c.tableAlias
}

func (teamMemberColumns) AliasedAs(alias string) teamMemberColumns {
	return buildTeamMemberColumns(alias)
}

func buildTeamMemberColumns(alias string) teamMemberColumns {
	return teamMemberColumns{
		tableAlias:   alias,
		UserID:       psql.Quote(alias, "user_id"),
		TeamID:       psql.Quote(alias, "team_id"),
		Role:         psql.Quote(alias, "role"),
		JerseyNumber: psql.Quote(alias, "jersey_number"),
		Position:     psql.Quote(alias, "position"),
		JoinedAt:     psql.Quote(alias, "joined_at"),
	}
}

type teamMemberWhere[Q psql.Filterable] struct {
	UserID       psql.WhereMod[Q, string]
	TeamID       psql.WhereMod[Q, string]
	Role         psql.WhereMod[Q, string]
	JerseyNumber psql.WhereNullMod[Q, int32]
	Position     psql.WhereNullMod[Q, string]
	JoinedAt     psql.WhereMod[Q, time.Time]
}

func (teamMemberWhere[Q]) AliasedAs(alias string) teamMemberWhere[Q] {
	return buildTeamMemberWhere[Q](buildTeamMemberColumns(alias))
}

func buildTeamMemberWhere[Q psql.Filterable](cols teamMemberColumns) teamMemberWhere[Q] {
	return teamMemberWhere[Q]{
		UserID:       psql.Where[Q, string](cols.UserID),
		TeamID:       psql.Where[Q, string](cols.TeamID),
		Role:         psql.Where[Q, string](cols.Role),
		JerseyNumber: psql.WhereNull[Q, int32](cols.JerseyNumber),
		Position:     psql.WhereNull[Q, string](cols.Position),
		JoinedAt:     psql.Where[Q, time.Time](cols.JoinedAt),
	}
}

// TeamMemberSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type TeamMemberSetter struct {
	UserID       omit.Val[string]     `db:"user_id,pk" json:"user_id"`
	TeamID       omit.Val[string]     `db:"team_id,pk" json:"team_id"`
	Role         omit.Val[string]     `db:"role" json:"role"`
	JerseyNumber omitnull.Val[int32]  `db:"jersey_number" json:"jersey_number"`
	Position     omitnull.Val[string] `db:"position" json:"position"`
	JoinedAt     omit.Val[time.Time]  `db:"joined_at" json:"joined_at"`
}

func (s TeamMemberSetter) SetColumns() []string {
	vals := make([]string, 0, 6)
	if !s.UserID.IsUnset() {
		vals = append(vals, "user_id")
	}

	if !s.TeamID.IsUnset() {
		vals = append(vals, "team_id")
	}

	if !s.Role.IsUnset() {
		vals = append(vals, "role")
	}

	if !s.JerseyNumber.IsUnset() {
		vals = append(vals, "jersey_number")
	}

	if !s.Position.IsUnset() {
		vals = append(vals, "position")
	}

	if !s.JoinedAt.IsUnset() {
		vals = append(vals, "joined_at")
	}

	return vals
}

func (s TeamMemberSetter) Overwrite(t *TeamMember) {
	if !s.UserID.IsUnset() {
		t.UserID, _ = s.UserID.Get()
	}
	if !s.TeamID.IsUnset() {
		t.TeamID, _ = s.TeamID.Get()
	}
	if !s.Role.IsUnset() {
		t.Role, _ = s.Role.Get()
	}
	if !s.JerseyNumber.IsUnset() {
		t.JerseyNumber, _ = s.JerseyNumber.GetNull()
	}
	if !s.Position.IsUnset() {
		t.Position, _ = s.Position.GetNull()
	}
	if !s.JoinedAt.IsUnset() {
		t.JoinedAt, _ = s.JoinedAt.Get()
	}
}

func (s *TeamMemberSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return TeamMembers.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 6)
		if s.UserID.IsUnset() {
			vals[0] = psql.Raw("DEFAULT")
		} else {
			vals[0] = psql.Arg(s.UserID)
		}

		if s.TeamID.IsUnset() {
			vals[1] = psql.Raw("DEFAULT")
		} else {
			vals[1] = psql.Arg(s.TeamID)
		}

		if s.Role.IsUnset() {
			vals[2] = psql.Raw("DEFAULT")
		} else {
			vals[2] = psql.Arg(s.Role)
		}

		if s.JerseyNumber.IsUnset() {
			vals[3] = psql.Raw("DEFAULT")
		} else {
			vals[3] = psql.Arg(s.JerseyNumber)
		}

		if s.Position.IsUnset() {
			vals[4] = psql.Raw("DEFAULT")
		} else {
			vals[4] = psql.Arg(s.Position)
		}

		if s.JoinedAt.IsUnset() {
			vals[5] = psql.Raw("DEFAULT")
		} else {
			vals[5] = psql.Arg(s.JoinedAt)
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s TeamMemberSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s TeamMemberSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 6)

	if !s.UserID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "user_id")...),
			psql.Arg(s.UserID),
		}})
	}

	if !s.TeamID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "team_id")...),
			psql.Arg(s.TeamID),
		}})
	}

	if !s.Role.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "role")...),
			psql.Arg(s.Role),
		}})
	}

	if !s.JerseyNumber.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "jersey_number")...),
			psql.Arg(s.JerseyNumber),
		}})
	}

	if !s.Position.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "position")...),
			psql.Arg(s.Position),
		}})
	}

	if !s.JoinedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "joined_at")...),
			psql.Arg(s.JoinedAt),
		}})
	}

	return exprs
}

// FindTeamMember retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindTeamMember(ctx context.Context, exec bob.Executor, UserIDPK string, TeamIDPK string, cols ...string) (*TeamMember, error) {
	if len(cols) == 0 {
		return TeamMembers.Query(
			SelectWhere.TeamMembers.UserID.EQ(UserIDPK),
			SelectWhere.TeamMembers.TeamID.EQ(TeamIDPK),
		).One(ctx, exec)
	}

	return TeamMembers.Query(
		SelectWhere.TeamMembers.UserID.EQ(UserIDPK),
		SelectWhere.TeamMembers.TeamID.EQ(TeamIDPK),
		sm.Columns(TeamMembers.Columns().Only(cols...)),
	).One(ctx, exec)
}

// TeamMemberExists checks the presence of a single record by primary key
func TeamMemberExists(ctx context.Context, exec bob.Executor, UserIDPK string, TeamIDPK string) (bool, error) {
	return TeamMembers.Query(
		SelectWhere.TeamMembers.UserID.EQ(UserIDPK),
		SelectWhere.TeamMembers.TeamID.EQ(TeamIDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after TeamMember is retrieved from the database
func (o *TeamMember) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = TeamMembers.AfterSelectHooks.RunHooks(ctx, exec, TeamMemberSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = TeamMembers.AfterInsertHooks.RunHooks(ctx, exec, TeamMemberSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = TeamMembers.AfterUpdateHooks.RunHooks(ctx, exec, TeamMemberSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = TeamMembers.AfterDeleteHooks.RunHooks(ctx, exec, TeamMemberSlice{o})
	}

	return err
}

// PrimaryKeyVals returns the primary key values of the TeamMember
func (o *TeamMember) PrimaryKeyVals() bob.Expression {
	return psql.ArgGroup(
		o.UserID,
		o.TeamID,
	)
}

func (o *TeamMember) pkEQ() dialect.Expression {
	return psql.Group(psql.Quote("team_members", "user_id"), psql.Quote("team_members", "team_id")).EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.PrimaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the TeamMember
func (o *TeamMember) Update(ctx context.Context, exec bob.Executor, s *TeamMemberSetter) error {
	v, err := TeamMembers.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single TeamMember record with an executor
func (o *TeamMember) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := TeamMembers.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the TeamMember using the executor
func (o *TeamMember) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := TeamMembers.Query(
		SelectWhere.TeamMembers.UserID.EQ(o.UserID),
		SelectWhere.TeamMembers.TeamID.EQ(o.TeamID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after TeamMemberSlice is retrieved from the database
func (o TeamMemberSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = TeamMembers.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = TeamMembers.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = TeamMembers.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = TeamMembers.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o TeamMemberSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Group(psql.Quote("team_members", "user_id"), psql.Quote("team_members", "team_id")).In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.PrimaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o TeamMemberSlice) copyMatchingRows(from ...*TeamMember) {
	for i, old := range o {
		for _, new := range from {
			if new.UserID != old.UserID {
				continue
			}
			if new.TeamID != old.TeamID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o TeamMemberSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return TeamMembers.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *TeamMember:
				o.copyMatchingRows(retrieved)
			case []*TeamMember:
				o.copyMatchingRows(retrieved...)
			case TeamMemberSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a TeamMember or a slice of TeamMember
				// then run the AfterUpdateHooks on the slice
				_, err = TeamMembers.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o TeamMemberSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return TeamMembers.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *TeamMember:
				o.copyMatchingRows(retrieved)
			case []*TeamMember:
				o.copyMatchingRows(retrieved...)
			case TeamMemberSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a TeamMember or a slice of TeamMember
				// then run the AfterDeleteHooks on the slice
				_, err = TeamMembers.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o TeamMemberSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals TeamMemberSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := TeamMembers.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o TeamMemberSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := TeamMembers.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o TeamMemberSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := TeamMembers.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type teamMemberJoins[Q dialect.Joinable] struct {
	typ  string
	Team func(context.Context) modAs[Q, teamColumns]
	User func(context.Context) modAs[Q, userColumns]
}

func (j teamMemberJoins[Q]) aliasedAs(alias string) teamMemberJoins[Q] {
	return buildTeamMemberJoins[Q](buildTeamMemberColumns(alias), j.typ)
}

func buildTeamMemberJoins[Q dialect.Joinable](cols teamMemberColumns, typ string) teamMemberJoins[Q] {
	return teamMemberJoins[Q]{
		typ:  typ,
		Team: teamMembersJoinTeam[Q](cols, typ),
		User: teamMembersJoinUser[Q](cols, typ),
	}
}

func teamMembersJoinTeam[Q dialect.Joinable](from teamMemberColumns, typ string) func(context.Context) modAs[Q, teamColumns] {
	return func(ctx context.Context) modAs[Q, teamColumns] {
		return modAs[Q, teamColumns]{
			c: TeamColumns,
			f: func(to teamColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Teams.Name().As(to.Alias())).On(
						to.ID.EQ(from.TeamID),
					))
				}

				return mods
			},
		}
	}
}

func teamMembersJoinUser[Q dialect.Joinable](from teamMemberColumns, typ string) func(context.Context) modAs[Q, userColumns] {
	return func(ctx context.Context) modAs[Q, userColumns] {
		return modAs[Q, userColumns]{
			c: UserColumns,
			f: func(to userColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Users.Name().As(to.Alias())).On(
						to.ID.EQ(from.UserID),
					))
				}

				return mods
			},
		}
	}
}

// Team starts a query for related objects on teams
func (o *TeamMember) Team(mods ...bob.Mod[*dialect.SelectQuery]) TeamsQuery {
	return Teams.Query(append(mods,
		sm.Where(TeamColumns.ID.EQ(psql.Arg(o.TeamID))),
	)...)
}

func (os TeamMemberSlice) Team(mods ...bob.Mod[*dialect.SelectQuery]) TeamsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.TeamID)
	}

	return Teams.Query(append(mods,
		sm.Where(psql.Group(TeamColumns.ID).In(PKArgs...)),
	)...)
}

// User starts a query for related objects on users
func (o *TeamMember) User(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(append(mods,
		sm.Where(UserColumns.ID.EQ(psql.Arg(o.UserID))),
	)...)
}

func (os TeamMemberSlice) User(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.UserID)
	}

	return Users.Query(append(mods,
		sm.Where(psql.Group(UserColumns.ID).In(PKArgs...)),
	)...)
}

func (o *TeamMember) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "Team":
		rel, ok := retrieved.(*Team)
		if !ok {
			return fmt.Errorf("teamMember cannot load %T as %q", retrieved, name)
		}

		o.R.Team = rel

		if rel != nil {
			rel.R.TeamMembers = TeamMemberSlice{o}
		}
		return nil
	case "User":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("teamMember cannot load %T as %q", retrieved, name)
		}

		o.R.User = rel

		if rel != nil {
			rel.R.TeamMembers = TeamMemberSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("teamMember has no relationship %q", name)
	}
}

func PreloadTeamMemberTeam(opts ...psql.PreloadOption) psql.Preloader {
	return psql.Preload[*Team, TeamSlice](orm.Relationship{
		Name: "Team",
		Sides: []orm.RelSide{
			{
				From: TableNames.TeamMembers,
				To:   TableNames.Teams,
				FromColumns: []string{
					ColumnNames.TeamMembers.TeamID,
				},
				ToColumns: []string{
					ColumnNames.Teams.ID,
				},
			},
		},
	}, Teams.Columns().Names(), opts...)
}

func ThenLoadTeamMemberTeam(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadTeamMemberTeam(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load TeamMemberTeam", retrieved)
		}

		err := loader.LoadTeamMemberTeam(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadTeamMemberTeam loads the teamMember's Team into the .R struct
func (o *TeamMember) LoadTeamMemberTeam(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Team = nil

	related, err := o.Team(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.TeamMembers = TeamMemberSlice{o}

	o.R.Team = related
	return nil
}

// LoadTeamMemberTeam loads the teamMember's Team into the .R struct
func (os TeamMemberSlice) LoadTeamMemberTeam(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	teams, err := os.Team(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range teams {
			if o.TeamID != rel.ID {
				continue
			}

			rel.R.TeamMembers = append(rel.R.TeamMembers, o)

			o.R.Team = rel
			break
		}
	}

	return nil
}

func PreloadTeamMemberUser(opts ...psql.PreloadOption) psql.Preloader {
	return psql.Preload[*User, UserSlice](orm.Relationship{
		Name: "User",
		Sides: []orm.RelSide{
			{
				From: TableNames.TeamMembers,
				To:   TableNames.Users,
				FromColumns: []string{
					ColumnNames.TeamMembers.UserID,
				},
				ToColumns: []string{
					ColumnNames.Users.ID,
				},
			},
		},
	}, Users.Columns().Names(), opts...)
}

func ThenLoadTeamMemberUser(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadTeamMemberUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load TeamMemberUser", retrieved)
		}

		err := loader.LoadTeamMemberUser(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadTeamMemberUser loads the teamMember's User into the .R struct
func (o *TeamMember) LoadTeamMemberUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.User = nil

	related, err := o.User(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.TeamMembers = TeamMemberSlice{o}

	o.R.User = related
	return nil
}

// LoadTeamMemberUser loads the teamMember's User into the .R struct
func (os TeamMemberSlice) LoadTeamMemberUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.User(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range users {
			if o.UserID != rel.ID {
				continue
			}

			rel.R.TeamMembers = append(rel.R.TeamMembers, o)

			o.R.User = rel
			break
		}
	}

	return nil
}

func attachTeamMemberTeam0(ctx context.Context, exec bob.Executor, count int, teamMember0 *TeamMember, team1 *Team) (*TeamMember, error) {
	setter := &TeamMemberSetter{
		TeamID: omit.From(team1.ID),
	}

	err := teamMember0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachTeamMemberTeam0: %w", err)
	}

	return teamMember0, nil
}

func (teamMember0 *TeamMember) InsertTeam(ctx context.Context, exec bob.Executor, related *TeamSetter) error {
	team1, err := Teams.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachTeamMemberTeam0(ctx, exec, 1, teamMember0, team1)
	if err != nil {
		return err
	}

	teamMember0.R.Team = team1

	team1.R.TeamMembers = append(team1.R.TeamMembers, teamMember0)

	return nil
}

func (teamMember0 *TeamMember) AttachTeam(ctx context.Context, exec bob.Executor, team1 *Team) error {
	var err error

	_, err = attachTeamMemberTeam0(ctx, exec, 1, teamMember0, team1)
	if err != nil {
		return err
	}

	teamMember0.R.Team = team1

	team1.R.TeamMembers = append(team1.R.TeamMembers, teamMember0)

	return nil
}

func attachTeamMemberUser0(ctx context.Context, exec bob.Executor, count int, teamMember0 *TeamMember, user1 *User) (*TeamMember, error) {
	setter := &TeamMemberSetter{
		UserID: omit.From(user1.ID),
	}

	err := teamMember0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachTeamMemberUser0: %w", err)
	}

	return teamMember0, nil
}

func (teamMember0 *TeamMember) InsertUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	user1, err := Users.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachTeamMemberUser0(ctx, exec, 1, teamMember0, user1)
	if err != nil {
		return err
	}

	teamMember0.R.User = user1

	user1.R.TeamMembers = append(user1.R.TeamMembers, teamMember0)

	return nil
}

func (teamMember0 *TeamMember) AttachUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	_, err = attachTeamMemberUser0(ctx, exec, 1, teamMember0, user1)
	if err != nil {
		return err
	}

	teamMember0.R.User = user1

	user1.R.TeamMembers = append(user1.R.TeamMembers, teamMember0)

	return nil
}
