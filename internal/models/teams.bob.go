// Code generated by BobGen psql v0.30.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"io"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// Team is an object representing the database table.
type Team struct {
	ID             string           `db:"id,pk" json:"id"`
	Name           string           `db:"name" json:"name"`
	ShortName      null.Val[string] `db:"short_name" json:"short_name"`
	LogoURL        null.Val[string] `db:"logo_url" json:"logo_url"`
	PrimaryColor   null.Val[string] `db:"primary_color" json:"primary_color"`
	SecondaryColor null.Val[string] `db:"secondary_color" json:"secondary_color"`
	SportType      string           `db:"sport_type" json:"sport_type"`
	Division       null.Val[string] `db:"division" json:"division"`
	Season         null.Val[string] `db:"season" json:"season"`
	IsActive       null.Val[bool]   `db:"is_active" json:"is_active"`
	CreatedAt      time.Time        `db:"created_at" json:"created_at"`
	UpdatedAt      time.Time        `db:"updated_at" json:"updated_at"`

	R teamR `db:"-" json:"-"`
}

// TeamSlice is an alias for a slice of pointers to Team.
// This should almost always be used instead of []*Team.
type TeamSlice []*Team

// Teams contains methods to work with the teams table
var Teams = psql.NewTablex[*Team, TeamSlice, *TeamSetter]("", "teams")

// TeamsQuery is a query on the teams table
type TeamsQuery = *psql.ViewQuery[*Team, TeamSlice]

// teamR is where relationships are stored.
type teamR struct {
	TeamMembers TeamMemberSlice `json:"TeamMembers"` // team_members.team_members_team_id_fkey
	TeamSetting *TeamSetting    `json:"TeamSetting"` // team_settings.team_settings_team_id_fkey
}

type teamColumnNames struct {
	ID             string
	Name           string
	ShortName      string
	LogoURL        string
	PrimaryColor   string
	SecondaryColor string
	SportType      string
	Division       string
	Season         string
	IsActive       string
	CreatedAt      string
	UpdatedAt      string
}

var TeamColumns = buildTeamColumns("teams")

type teamColumns struct {
	tableAlias     string
	ID             psql.Expression
	Name           psql.Expression
	ShortName      psql.Expression
	LogoURL        psql.Expression
	PrimaryColor   psql.Expression
	SecondaryColor psql.Expression
	SportType      psql.Expression
	Division       psql.Expression
	Season         psql.Expression
	IsActive       psql.Expression
	CreatedAt      psql.Expression
	UpdatedAt      psql.Expression
}

func (c teamColumns) Alias() string {
	return c.tableAlias
}

func (teamColumns) AliasedAs(alias string) teamColumns {
	return buildTeamColumns(alias)
}

func buildTeamColumns(alias string) teamColumns {
	return teamColumns{
		tableAlias:     alias,
		ID:             psql.Quote(alias, "id"),
		Name:           psql.Quote(alias, "name"),
		ShortName:      psql.Quote(alias, "short_name"),
		LogoURL:        psql.Quote(alias, "logo_url"),
		PrimaryColor:   psql.Quote(alias, "primary_color"),
		SecondaryColor: psql.Quote(alias, "secondary_color"),
		SportType:      psql.Quote(alias, "sport_type"),
		Division:       psql.Quote(alias, "division"),
		Season:         psql.Quote(alias, "season"),
		IsActive:       psql.Quote(alias, "is_active"),
		CreatedAt:      psql.Quote(alias, "created_at"),
		UpdatedAt:      psql.Quote(alias, "updated_at"),
	}
}

type teamWhere[Q psql.Filterable] struct {
	ID             psql.WhereMod[Q, string]
	Name           psql.WhereMod[Q, string]
	ShortName      psql.WhereNullMod[Q, string]
	LogoURL        psql.WhereNullMod[Q, string]
	PrimaryColor   psql.WhereNullMod[Q, string]
	SecondaryColor psql.WhereNullMod[Q, string]
	SportType      psql.WhereMod[Q, string]
	Division       psql.WhereNullMod[Q, string]
	Season         psql.WhereNullMod[Q, string]
	IsActive       psql.WhereNullMod[Q, bool]
	CreatedAt      psql.WhereMod[Q, time.Time]
	UpdatedAt      psql.WhereMod[Q, time.Time]
}

func (teamWhere[Q]) AliasedAs(alias string) teamWhere[Q] {
	return buildTeamWhere[Q](buildTeamColumns(alias))
}

func buildTeamWhere[Q psql.Filterable](cols teamColumns) teamWhere[Q] {
	return teamWhere[Q]{
		ID:             psql.Where[Q, string](cols.ID),
		Name:           psql.Where[Q, string](cols.Name),
		ShortName:      psql.WhereNull[Q, string](cols.ShortName),
		LogoURL:        psql.WhereNull[Q, string](cols.LogoURL),
		PrimaryColor:   psql.WhereNull[Q, string](cols.PrimaryColor),
		SecondaryColor: psql.WhereNull[Q, string](cols.SecondaryColor),
		SportType:      psql.Where[Q, string](cols.SportType),
		Division:       psql.WhereNull[Q, string](cols.Division),
		Season:         psql.WhereNull[Q, string](cols.Season),
		IsActive:       psql.WhereNull[Q, bool](cols.IsActive),
		CreatedAt:      psql.Where[Q, time.Time](cols.CreatedAt),
		UpdatedAt:      psql.Where[Q, time.Time](cols.UpdatedAt),
	}
}

// TeamSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type TeamSetter struct {
	ID             omit.Val[string]     `db:"id,pk" json:"id"`
	Name           omit.Val[string]     `db:"name" json:"name"`
	ShortName      omitnull.Val[string] `db:"short_name" json:"short_name"`
	LogoURL        omitnull.Val[string] `db:"logo_url" json:"logo_url"`
	PrimaryColor   omitnull.Val[string] `db:"primary_color" json:"primary_color"`
	SecondaryColor omitnull.Val[string] `db:"secondary_color" json:"secondary_color"`
	SportType      omit.Val[string]     `db:"sport_type" json:"sport_type"`
	Division       omitnull.Val[string] `db:"division" json:"division"`
	Season         omitnull.Val[string] `db:"season" json:"season"`
	IsActive       omitnull.Val[bool]   `db:"is_active" json:"is_active"`
	CreatedAt      omit.Val[time.Time]  `db:"created_at" json:"created_at"`
	UpdatedAt      omit.Val[time.Time]  `db:"updated_at" json:"updated_at"`
}

func (s TeamSetter) SetColumns() []string {
	vals := make([]string, 0, 12)
	if !s.ID.IsUnset() {
		vals = append(vals, "id")
	}

	if !s.Name.IsUnset() {
		vals = append(vals, "name")
	}

	if !s.ShortName.IsUnset() {
		vals = append(vals, "short_name")
	}

	if !s.LogoURL.IsUnset() {
		vals = append(vals, "logo_url")
	}

	if !s.PrimaryColor.IsUnset() {
		vals = append(vals, "primary_color")
	}

	if !s.SecondaryColor.IsUnset() {
		vals = append(vals, "secondary_color")
	}

	if !s.SportType.IsUnset() {
		vals = append(vals, "sport_type")
	}

	if !s.Division.IsUnset() {
		vals = append(vals, "division")
	}

	if !s.Season.IsUnset() {
		vals = append(vals, "season")
	}

	if !s.IsActive.IsUnset() {
		vals = append(vals, "is_active")
	}

	if !s.CreatedAt.IsUnset() {
		vals = append(vals, "created_at")
	}

	if !s.UpdatedAt.IsUnset() {
		vals = append(vals, "updated_at")
	}

	return vals
}

func (s TeamSetter) Overwrite(t *Team) {
	if !s.ID.IsUnset() {
		t.ID, _ = s.ID.Get()
	}
	if !s.Name.IsUnset() {
		t.Name, _ = s.Name.Get()
	}
	if !s.ShortName.IsUnset() {
		t.ShortName, _ = s.ShortName.GetNull()
	}
	if !s.LogoURL.IsUnset() {
		t.LogoURL, _ = s.LogoURL.GetNull()
	}
	if !s.PrimaryColor.IsUnset() {
		t.PrimaryColor, _ = s.PrimaryColor.GetNull()
	}
	if !s.SecondaryColor.IsUnset() {
		t.SecondaryColor, _ = s.SecondaryColor.GetNull()
	}
	if !s.SportType.IsUnset() {
		t.SportType, _ = s.SportType.Get()
	}
	if !s.Division.IsUnset() {
		t.Division, _ = s.Division.GetNull()
	}
	if !s.Season.IsUnset() {
		t.Season, _ = s.Season.GetNull()
	}
	if !s.IsActive.IsUnset() {
		t.IsActive, _ = s.IsActive.GetNull()
	}
	if !s.CreatedAt.IsUnset() {
		t.CreatedAt, _ = s.CreatedAt.Get()
	}
	if !s.UpdatedAt.IsUnset() {
		t.UpdatedAt, _ = s.UpdatedAt.Get()
	}
}

func (s *TeamSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return Teams.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 12)
		if s.ID.IsUnset() {
			vals[0] = psql.Raw("DEFAULT")
		} else {
			vals[0] = psql.Arg(s.ID)
		}

		if s.Name.IsUnset() {
			vals[1] = psql.Raw("DEFAULT")
		} else {
			vals[1] = psql.Arg(s.Name)
		}

		if s.ShortName.IsUnset() {
			vals[2] = psql.Raw("DEFAULT")
		} else {
			vals[2] = psql.Arg(s.ShortName)
		}

		if s.LogoURL.IsUnset() {
			vals[3] = psql.Raw("DEFAULT")
		} else {
			vals[3] = psql.Arg(s.LogoURL)
		}

		if s.PrimaryColor.IsUnset() {
			vals[4] = psql.Raw("DEFAULT")
		} else {
			vals[4] = psql.Arg(s.PrimaryColor)
		}

		if s.SecondaryColor.IsUnset() {
			vals[5] = psql.Raw("DEFAULT")
		} else {
			vals[5] = psql.Arg(s.SecondaryColor)
		}

		if s.SportType.IsUnset() {
			vals[6] = psql.Raw("DEFAULT")
		} else {
			vals[6] = psql.Arg(s.SportType)
		}

		if s.Division.IsUnset() {
			vals[7] = psql.Raw("DEFAULT")
		} else {
			vals[7] = psql.Arg(s.Division)
		}

		if s.Season.IsUnset() {
			vals[8] = psql.Raw("DEFAULT")
		} else {
			vals[8] = psql.Arg(s.Season)
		}

		if s.IsActive.IsUnset() {
			vals[9] = psql.Raw("DEFAULT")
		} else {
			vals[9] = psql.Arg(s.IsActive)
		}

		if s.CreatedAt.IsUnset() {
			vals[10] = psql.Raw("DEFAULT")
		} else {
			vals[10] = psql.Arg(s.CreatedAt)
		}

		if s.UpdatedAt.IsUnset() {
			vals[11] = psql.Raw("DEFAULT")
		} else {
			vals[11] = psql.Arg(s.UpdatedAt)
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s TeamSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s TeamSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 12)

	if !s.ID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "id")...),
			psql.Arg(s.ID),
		}})
	}

	if !s.Name.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "name")...),
			psql.Arg(s.Name),
		}})
	}

	if !s.ShortName.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "short_name")...),
			psql.Arg(s.ShortName),
		}})
	}

	if !s.LogoURL.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "logo_url")...),
			psql.Arg(s.LogoURL),
		}})
	}

	if !s.PrimaryColor.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "primary_color")...),
			psql.Arg(s.PrimaryColor),
		}})
	}

	if !s.SecondaryColor.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "secondary_color")...),
			psql.Arg(s.SecondaryColor),
		}})
	}

	if !s.SportType.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "sport_type")...),
			psql.Arg(s.SportType),
		}})
	}

	if !s.Division.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "division")...),
			psql.Arg(s.Division),
		}})
	}

	if !s.Season.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "season")...),
			psql.Arg(s.Season),
		}})
	}

	if !s.IsActive.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "is_active")...),
			psql.Arg(s.IsActive),
		}})
	}

	if !s.CreatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_at")...),
			psql.Arg(s.CreatedAt),
		}})
	}

	if !s.UpdatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "updated_at")...),
			psql.Arg(s.UpdatedAt),
		}})
	}

	return exprs
}

// FindTeam retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindTeam(ctx context.Context, exec bob.Executor, IDPK string, cols ...string) (*Team, error) {
	if len(cols) == 0 {
		return Teams.Query(
			SelectWhere.Teams.ID.EQ(IDPK),
		).One(ctx, exec)
	}

	return Teams.Query(
		SelectWhere.Teams.ID.EQ(IDPK),
		sm.Columns(Teams.Columns().Only(cols...)),
	).One(ctx, exec)
}

// TeamExists checks the presence of a single record by primary key
func TeamExists(ctx context.Context, exec bob.Executor, IDPK string) (bool, error) {
	return Teams.Query(
		SelectWhere.Teams.ID.EQ(IDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after Team is retrieved from the database
func (o *Team) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Teams.AfterSelectHooks.RunHooks(ctx, exec, TeamSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = Teams.AfterInsertHooks.RunHooks(ctx, exec, TeamSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = Teams.AfterUpdateHooks.RunHooks(ctx, exec, TeamSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = Teams.AfterDeleteHooks.RunHooks(ctx, exec, TeamSlice{o})
	}

	return err
}

// PrimaryKeyVals returns the primary key values of the Team
func (o *Team) PrimaryKeyVals() bob.Expression {
	return psql.Arg(o.ID)
}

func (o *Team) pkEQ() dialect.Expression {
	return psql.Quote("teams", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.PrimaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the Team
func (o *Team) Update(ctx context.Context, exec bob.Executor, s *TeamSetter) error {
	v, err := Teams.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single Team record with an executor
func (o *Team) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := Teams.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the Team using the executor
func (o *Team) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Teams.Query(
		SelectWhere.Teams.ID.EQ(o.ID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after TeamSlice is retrieved from the database
func (o TeamSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Teams.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = Teams.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = Teams.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = Teams.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o TeamSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("teams", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.PrimaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o TeamSlice) copyMatchingRows(from ...*Team) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o TeamSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Teams.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Team:
				o.copyMatchingRows(retrieved)
			case []*Team:
				o.copyMatchingRows(retrieved...)
			case TeamSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Team or a slice of Team
				// then run the AfterUpdateHooks on the slice
				_, err = Teams.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o TeamSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Teams.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Team:
				o.copyMatchingRows(retrieved)
			case []*Team:
				o.copyMatchingRows(retrieved...)
			case TeamSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Team or a slice of Team
				// then run the AfterDeleteHooks on the slice
				_, err = Teams.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o TeamSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals TeamSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Teams.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o TeamSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Teams.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o TeamSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := Teams.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type teamJoins[Q dialect.Joinable] struct {
	typ         string
	TeamMembers func(context.Context) modAs[Q, teamMemberColumns]
	TeamSetting func(context.Context) modAs[Q, teamSettingColumns]
}

func (j teamJoins[Q]) aliasedAs(alias string) teamJoins[Q] {
	return buildTeamJoins[Q](buildTeamColumns(alias), j.typ)
}

func buildTeamJoins[Q dialect.Joinable](cols teamColumns, typ string) teamJoins[Q] {
	return teamJoins[Q]{
		typ:         typ,
		TeamMembers: teamsJoinTeamMembers[Q](cols, typ),
		TeamSetting: teamsJoinTeamSetting[Q](cols, typ),
	}
}

func teamsJoinTeamMembers[Q dialect.Joinable](from teamColumns, typ string) func(context.Context) modAs[Q, teamMemberColumns] {
	return func(ctx context.Context) modAs[Q, teamMemberColumns] {
		return modAs[Q, teamMemberColumns]{
			c: TeamMemberColumns,
			f: func(to teamMemberColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, TeamMembers.Name().As(to.Alias())).On(
						to.TeamID.EQ(from.ID),
					))
				}

				return mods
			},
		}
	}
}

func teamsJoinTeamSetting[Q dialect.Joinable](from teamColumns, typ string) func(context.Context) modAs[Q, teamSettingColumns] {
	return func(ctx context.Context) modAs[Q, teamSettingColumns] {
		return modAs[Q, teamSettingColumns]{
			c: TeamSettingColumns,
			f: func(to teamSettingColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, TeamSettings.Name().As(to.Alias())).On(
						to.TeamID.EQ(from.ID),
					))
				}

				return mods
			},
		}
	}
}

// TeamMembers starts a query for related objects on team_members
func (o *Team) TeamMembers(mods ...bob.Mod[*dialect.SelectQuery]) TeamMembersQuery {
	return TeamMembers.Query(append(mods,
		sm.Where(TeamMemberColumns.TeamID.EQ(psql.Arg(o.ID))),
	)...)
}

func (os TeamSlice) TeamMembers(mods ...bob.Mod[*dialect.SelectQuery]) TeamMembersQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.ID)
	}

	return TeamMembers.Query(append(mods,
		sm.Where(psql.Group(TeamMemberColumns.TeamID).In(PKArgs...)),
	)...)
}

// TeamSetting starts a query for related objects on team_settings
func (o *Team) TeamSetting(mods ...bob.Mod[*dialect.SelectQuery]) TeamSettingsQuery {
	return TeamSettings.Query(append(mods,
		sm.Where(TeamSettingColumns.TeamID.EQ(psql.Arg(o.ID))),
	)...)
}

func (os TeamSlice) TeamSetting(mods ...bob.Mod[*dialect.SelectQuery]) TeamSettingsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.ID)
	}

	return TeamSettings.Query(append(mods,
		sm.Where(psql.Group(TeamSettingColumns.TeamID).In(PKArgs...)),
	)...)
}

func (o *Team) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "TeamMembers":
		rels, ok := retrieved.(TeamMemberSlice)
		if !ok {
			return fmt.Errorf("team cannot load %T as %q", retrieved, name)
		}

		o.R.TeamMembers = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.Team = o
			}
		}
		return nil
	case "TeamSetting":
		rel, ok := retrieved.(*TeamSetting)
		if !ok {
			return fmt.Errorf("team cannot load %T as %q", retrieved, name)
		}

		o.R.TeamSetting = rel

		if rel != nil {
			rel.R.Team = o
		}
		return nil
	default:
		return fmt.Errorf("team has no relationship %q", name)
	}
}

func ThenLoadTeamTeamMembers(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadTeamTeamMembers(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load TeamTeamMembers", retrieved)
		}

		err := loader.LoadTeamTeamMembers(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadTeamTeamMembers loads the team's TeamMembers into the .R struct
func (o *Team) LoadTeamTeamMembers(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.TeamMembers = nil

	related, err := o.TeamMembers(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.Team = o
	}

	o.R.TeamMembers = related
	return nil
}

// LoadTeamTeamMembers loads the team's TeamMembers into the .R struct
func (os TeamSlice) LoadTeamTeamMembers(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	teamMembers, err := os.TeamMembers(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.TeamMembers = nil
	}

	for _, o := range os {
		for _, rel := range teamMembers {
			if o.ID != rel.TeamID {
				continue
			}

			rel.R.Team = o

			o.R.TeamMembers = append(o.R.TeamMembers, rel)
		}
	}

	return nil
}

func PreloadTeamTeamSetting(opts ...psql.PreloadOption) psql.Preloader {
	return psql.Preload[*TeamSetting, TeamSettingSlice](orm.Relationship{
		Name: "TeamSetting",
		Sides: []orm.RelSide{
			{
				From: TableNames.Teams,
				To:   TableNames.TeamSettings,
				FromColumns: []string{
					ColumnNames.Teams.ID,
				},
				ToColumns: []string{
					ColumnNames.TeamSettings.TeamID,
				},
			},
		},
	}, TeamSettings.Columns().Names(), opts...)
}

func ThenLoadTeamTeamSetting(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadTeamTeamSetting(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load TeamTeamSetting", retrieved)
		}

		err := loader.LoadTeamTeamSetting(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadTeamTeamSetting loads the team's TeamSetting into the .R struct
func (o *Team) LoadTeamTeamSetting(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.TeamSetting = nil

	related, err := o.TeamSetting(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.Team = o

	o.R.TeamSetting = related
	return nil
}

// LoadTeamTeamSetting loads the team's TeamSetting into the .R struct
func (os TeamSlice) LoadTeamTeamSetting(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	teamSettings, err := os.TeamSetting(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range teamSettings {
			if o.ID != rel.TeamID {
				continue
			}

			rel.R.Team = o

			o.R.TeamSetting = rel
			break
		}
	}

	return nil
}

func insertTeamTeamMembers0(ctx context.Context, exec bob.Executor, teamMembers1 []*TeamMemberSetter, team0 *Team) (TeamMemberSlice, error) {
	for i := range teamMembers1 {
		teamMembers1[i].TeamID = omit.From(team0.ID)
	}

	ret, err := TeamMembers.Insert(bob.ToMods(teamMembers1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertTeamTeamMembers0: %w", err)
	}

	return ret, nil
}

func attachTeamTeamMembers0(ctx context.Context, exec bob.Executor, count int, teamMembers1 TeamMemberSlice, team0 *Team) (TeamMemberSlice, error) {
	setter := &TeamMemberSetter{
		TeamID: omit.From(team0.ID),
	}

	err := teamMembers1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachTeamTeamMembers0: %w", err)
	}

	return teamMembers1, nil
}

func (team0 *Team) InsertTeamMembers(ctx context.Context, exec bob.Executor, related ...*TeamMemberSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	teamMembers1, err := insertTeamTeamMembers0(ctx, exec, related, team0)
	if err != nil {
		return err
	}

	team0.R.TeamMembers = append(team0.R.TeamMembers, teamMembers1...)

	for _, rel := range teamMembers1 {
		rel.R.Team = team0
	}
	return nil
}

func (team0 *Team) AttachTeamMembers(ctx context.Context, exec bob.Executor, related ...*TeamMember) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	teamMembers1 := TeamMemberSlice(related)

	_, err = attachTeamTeamMembers0(ctx, exec, len(related), teamMembers1, team0)
	if err != nil {
		return err
	}

	team0.R.TeamMembers = append(team0.R.TeamMembers, teamMembers1...)

	for _, rel := range related {
		rel.R.Team = team0
	}

	return nil
}

func insertTeamTeamSetting0(ctx context.Context, exec bob.Executor, teamSetting1 *TeamSettingSetter, team0 *Team) (*TeamSetting, error) {
	teamSetting1.TeamID = omit.From(team0.ID)

	ret, err := TeamSettings.Insert(teamSetting1).One(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertTeamTeamSetting0: %w", err)
	}

	return ret, nil
}

func attachTeamTeamSetting0(ctx context.Context, exec bob.Executor, count int, teamSetting1 *TeamSetting, team0 *Team) (*TeamSetting, error) {
	setter := &TeamSettingSetter{
		TeamID: omit.From(team0.ID),
	}

	err := teamSetting1.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachTeamTeamSetting0: %w", err)
	}

	return teamSetting1, nil
}

func (team0 *Team) InsertTeamSetting(ctx context.Context, exec bob.Executor, related *TeamSettingSetter) error {
	teamSetting1, err := insertTeamTeamSetting0(ctx, exec, related, team0)
	if err != nil {
		return err
	}

	team0.R.TeamSetting = teamSetting1

	teamSetting1.R.Team = team0

	return nil
}

func (team0 *Team) AttachTeamSetting(ctx context.Context, exec bob.Executor, teamSetting1 *TeamSetting) error {
	var err error

	_, err = attachTeamTeamSetting0(ctx, exec, 1, teamSetting1, team0)
	if err != nil {
		return err
	}

	team0.R.TeamSetting = teamSetting1

	teamSetting1.R.Team = team0

	return nil
}
