// Code generated by BobGen psql v0.30.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/bob/types"
)

// UserSetting is an object representing the database table.
type UserSetting struct {
	UserID                  string                                `db:"user_id,pk" json:"user_id"`
	NotificationPreferences null.Val[types.JSON[json.RawMessage]] `db:"notification_preferences" json:"notification_preferences"`
	Theme                   null.Val[string]                      `db:"theme" json:"theme"`
	Language                null.Val[string]                      `db:"language" json:"language"`
	Timezone                null.Val[string]                      `db:"timezone" json:"timezone"`

	R userSettingR `db:"-" json:"-"`
}

// UserSettingSlice is an alias for a slice of pointers to UserSetting.
// This should almost always be used instead of []*UserSetting.
type UserSettingSlice []*UserSetting

// UserSettings contains methods to work with the user_settings table
var UserSettings = psql.NewTablex[*UserSetting, UserSettingSlice, *UserSettingSetter]("", "user_settings")

// UserSettingsQuery is a query on the user_settings table
type UserSettingsQuery = *psql.ViewQuery[*UserSetting, UserSettingSlice]

// userSettingR is where relationships are stored.
type userSettingR struct {
	User *User `json:"User"` // user_settings.user_settings_user_id_fkey
}

type userSettingColumnNames struct {
	UserID                  string
	NotificationPreferences string
	Theme                   string
	Language                string
	Timezone                string
}

var UserSettingColumns = buildUserSettingColumns("user_settings")

type userSettingColumns struct {
	tableAlias              string
	UserID                  psql.Expression
	NotificationPreferences psql.Expression
	Theme                   psql.Expression
	Language                psql.Expression
	Timezone                psql.Expression
}

func (c userSettingColumns) Alias() string {
	return c.tableAlias
}

func (userSettingColumns) AliasedAs(alias string) userSettingColumns {
	return buildUserSettingColumns(alias)
}

func buildUserSettingColumns(alias string) userSettingColumns {
	return userSettingColumns{
		tableAlias:              alias,
		UserID:                  psql.Quote(alias, "user_id"),
		NotificationPreferences: psql.Quote(alias, "notification_preferences"),
		Theme:                   psql.Quote(alias, "theme"),
		Language:                psql.Quote(alias, "language"),
		Timezone:                psql.Quote(alias, "timezone"),
	}
}

type userSettingWhere[Q psql.Filterable] struct {
	UserID                  psql.WhereMod[Q, string]
	NotificationPreferences psql.WhereNullMod[Q, types.JSON[json.RawMessage]]
	Theme                   psql.WhereNullMod[Q, string]
	Language                psql.WhereNullMod[Q, string]
	Timezone                psql.WhereNullMod[Q, string]
}

func (userSettingWhere[Q]) AliasedAs(alias string) userSettingWhere[Q] {
	return buildUserSettingWhere[Q](buildUserSettingColumns(alias))
}

func buildUserSettingWhere[Q psql.Filterable](cols userSettingColumns) userSettingWhere[Q] {
	return userSettingWhere[Q]{
		UserID:                  psql.Where[Q, string](cols.UserID),
		NotificationPreferences: psql.WhereNull[Q, types.JSON[json.RawMessage]](cols.NotificationPreferences),
		Theme:                   psql.WhereNull[Q, string](cols.Theme),
		Language:                psql.WhereNull[Q, string](cols.Language),
		Timezone:                psql.WhereNull[Q, string](cols.Timezone),
	}
}

// UserSettingSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type UserSettingSetter struct {
	UserID                  omit.Val[string]                          `db:"user_id,pk" json:"user_id"`
	NotificationPreferences omitnull.Val[types.JSON[json.RawMessage]] `db:"notification_preferences" json:"notification_preferences"`
	Theme                   omitnull.Val[string]                      `db:"theme" json:"theme"`
	Language                omitnull.Val[string]                      `db:"language" json:"language"`
	Timezone                omitnull.Val[string]                      `db:"timezone" json:"timezone"`
}

func (s UserSettingSetter) SetColumns() []string {
	vals := make([]string, 0, 5)
	if !s.UserID.IsUnset() {
		vals = append(vals, "user_id")
	}

	if !s.NotificationPreferences.IsUnset() {
		vals = append(vals, "notification_preferences")
	}

	if !s.Theme.IsUnset() {
		vals = append(vals, "theme")
	}

	if !s.Language.IsUnset() {
		vals = append(vals, "language")
	}

	if !s.Timezone.IsUnset() {
		vals = append(vals, "timezone")
	}

	return vals
}

func (s UserSettingSetter) Overwrite(t *UserSetting) {
	if !s.UserID.IsUnset() {
		t.UserID, _ = s.UserID.Get()
	}
	if !s.NotificationPreferences.IsUnset() {
		t.NotificationPreferences, _ = s.NotificationPreferences.GetNull()
	}
	if !s.Theme.IsUnset() {
		t.Theme, _ = s.Theme.GetNull()
	}
	if !s.Language.IsUnset() {
		t.Language, _ = s.Language.GetNull()
	}
	if !s.Timezone.IsUnset() {
		t.Timezone, _ = s.Timezone.GetNull()
	}
}

func (s *UserSettingSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return UserSettings.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 5)
		if s.UserID.IsUnset() {
			vals[0] = psql.Raw("DEFAULT")
		} else {
			vals[0] = psql.Arg(s.UserID)
		}

		if s.NotificationPreferences.IsUnset() {
			vals[1] = psql.Raw("DEFAULT")
		} else {
			vals[1] = psql.Arg(s.NotificationPreferences)
		}

		if s.Theme.IsUnset() {
			vals[2] = psql.Raw("DEFAULT")
		} else {
			vals[2] = psql.Arg(s.Theme)
		}

		if s.Language.IsUnset() {
			vals[3] = psql.Raw("DEFAULT")
		} else {
			vals[3] = psql.Arg(s.Language)
		}

		if s.Timezone.IsUnset() {
			vals[4] = psql.Raw("DEFAULT")
		} else {
			vals[4] = psql.Arg(s.Timezone)
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s UserSettingSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s UserSettingSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 5)

	if !s.UserID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "user_id")...),
			psql.Arg(s.UserID),
		}})
	}

	if !s.NotificationPreferences.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "notification_preferences")...),
			psql.Arg(s.NotificationPreferences),
		}})
	}

	if !s.Theme.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "theme")...),
			psql.Arg(s.Theme),
		}})
	}

	if !s.Language.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "language")...),
			psql.Arg(s.Language),
		}})
	}

	if !s.Timezone.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "timezone")...),
			psql.Arg(s.Timezone),
		}})
	}

	return exprs
}

// FindUserSetting retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindUserSetting(ctx context.Context, exec bob.Executor, UserIDPK string, cols ...string) (*UserSetting, error) {
	if len(cols) == 0 {
		return UserSettings.Query(
			SelectWhere.UserSettings.UserID.EQ(UserIDPK),
		).One(ctx, exec)
	}

	return UserSettings.Query(
		SelectWhere.UserSettings.UserID.EQ(UserIDPK),
		sm.Columns(UserSettings.Columns().Only(cols...)),
	).One(ctx, exec)
}

// UserSettingExists checks the presence of a single record by primary key
func UserSettingExists(ctx context.Context, exec bob.Executor, UserIDPK string) (bool, error) {
	return UserSettings.Query(
		SelectWhere.UserSettings.UserID.EQ(UserIDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after UserSetting is retrieved from the database
func (o *UserSetting) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = UserSettings.AfterSelectHooks.RunHooks(ctx, exec, UserSettingSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = UserSettings.AfterInsertHooks.RunHooks(ctx, exec, UserSettingSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = UserSettings.AfterUpdateHooks.RunHooks(ctx, exec, UserSettingSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = UserSettings.AfterDeleteHooks.RunHooks(ctx, exec, UserSettingSlice{o})
	}

	return err
}

// PrimaryKeyVals returns the primary key values of the UserSetting
func (o *UserSetting) PrimaryKeyVals() bob.Expression {
	return psql.Arg(o.UserID)
}

func (o *UserSetting) pkEQ() dialect.Expression {
	return psql.Quote("user_settings", "user_id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.PrimaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the UserSetting
func (o *UserSetting) Update(ctx context.Context, exec bob.Executor, s *UserSettingSetter) error {
	v, err := UserSettings.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single UserSetting record with an executor
func (o *UserSetting) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := UserSettings.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the UserSetting using the executor
func (o *UserSetting) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := UserSettings.Query(
		SelectWhere.UserSettings.UserID.EQ(o.UserID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after UserSettingSlice is retrieved from the database
func (o UserSettingSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = UserSettings.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = UserSettings.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = UserSettings.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = UserSettings.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o UserSettingSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("user_settings", "user_id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.PrimaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o UserSettingSlice) copyMatchingRows(from ...*UserSetting) {
	for i, old := range o {
		for _, new := range from {
			if new.UserID != old.UserID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o UserSettingSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return UserSettings.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *UserSetting:
				o.copyMatchingRows(retrieved)
			case []*UserSetting:
				o.copyMatchingRows(retrieved...)
			case UserSettingSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a UserSetting or a slice of UserSetting
				// then run the AfterUpdateHooks on the slice
				_, err = UserSettings.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o UserSettingSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return UserSettings.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *UserSetting:
				o.copyMatchingRows(retrieved)
			case []*UserSetting:
				o.copyMatchingRows(retrieved...)
			case UserSettingSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a UserSetting or a slice of UserSetting
				// then run the AfterDeleteHooks on the slice
				_, err = UserSettings.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o UserSettingSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals UserSettingSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := UserSettings.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o UserSettingSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := UserSettings.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o UserSettingSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := UserSettings.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type userSettingJoins[Q dialect.Joinable] struct {
	typ  string
	User func(context.Context) modAs[Q, userColumns]
}

func (j userSettingJoins[Q]) aliasedAs(alias string) userSettingJoins[Q] {
	return buildUserSettingJoins[Q](buildUserSettingColumns(alias), j.typ)
}

func buildUserSettingJoins[Q dialect.Joinable](cols userSettingColumns, typ string) userSettingJoins[Q] {
	return userSettingJoins[Q]{
		typ:  typ,
		User: userSettingsJoinUser[Q](cols, typ),
	}
}

func userSettingsJoinUser[Q dialect.Joinable](from userSettingColumns, typ string) func(context.Context) modAs[Q, userColumns] {
	return func(ctx context.Context) modAs[Q, userColumns] {
		return modAs[Q, userColumns]{
			c: UserColumns,
			f: func(to userColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Users.Name().As(to.Alias())).On(
						to.ID.EQ(from.UserID),
					))
				}

				return mods
			},
		}
	}
}

// User starts a query for related objects on users
func (o *UserSetting) User(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(append(mods,
		sm.Where(UserColumns.ID.EQ(psql.Arg(o.UserID))),
	)...)
}

func (os UserSettingSlice) User(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.UserID)
	}

	return Users.Query(append(mods,
		sm.Where(psql.Group(UserColumns.ID).In(PKArgs...)),
	)...)
}

func (o *UserSetting) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "User":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("userSetting cannot load %T as %q", retrieved, name)
		}

		o.R.User = rel

		if rel != nil {
			rel.R.UserSetting = o
		}
		return nil
	default:
		return fmt.Errorf("userSetting has no relationship %q", name)
	}
}

func PreloadUserSettingUser(opts ...psql.PreloadOption) psql.Preloader {
	return psql.Preload[*User, UserSlice](orm.Relationship{
		Name: "User",
		Sides: []orm.RelSide{
			{
				From: TableNames.UserSettings,
				To:   TableNames.Users,
				FromColumns: []string{
					ColumnNames.UserSettings.UserID,
				},
				ToColumns: []string{
					ColumnNames.Users.ID,
				},
			},
		},
	}, Users.Columns().Names(), opts...)
}

func ThenLoadUserSettingUser(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadUserSettingUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load UserSettingUser", retrieved)
		}

		err := loader.LoadUserSettingUser(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadUserSettingUser loads the userSetting's User into the .R struct
func (o *UserSetting) LoadUserSettingUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.User = nil

	related, err := o.User(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.UserSetting = o

	o.R.User = related
	return nil
}

// LoadUserSettingUser loads the userSetting's User into the .R struct
func (os UserSettingSlice) LoadUserSettingUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.User(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range users {
			if o.UserID != rel.ID {
				continue
			}

			rel.R.UserSetting = o

			o.R.User = rel
			break
		}
	}

	return nil
}

func attachUserSettingUser0(ctx context.Context, exec bob.Executor, count int, userSetting0 *UserSetting, user1 *User) (*UserSetting, error) {
	setter := &UserSettingSetter{
		UserID: omit.From(user1.ID),
	}

	err := userSetting0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachUserSettingUser0: %w", err)
	}

	return userSetting0, nil
}

func (userSetting0 *UserSetting) InsertUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	user1, err := Users.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachUserSettingUser0(ctx, exec, 1, userSetting0, user1)
	if err != nil {
		return err
	}

	userSetting0.R.User = user1

	user1.R.UserSetting = userSetting0

	return nil
}

func (userSetting0 *UserSetting) AttachUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	_, err = attachUserSettingUser0(ctx, exec, 1, userSetting0, user1)
	if err != nil {
		return err
	}

	userSetting0.R.User = user1

	user1.R.UserSetting = userSetting0

	return nil
}
